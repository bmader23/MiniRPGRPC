// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: Input/Move.proto

package Move

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Move_SetMove_FullMethodName = "/Move/SetMove"
)

// MoveClient is the client API for Move service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoveClient interface {
	SetMove(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Player, error)
}

type moveClient struct {
	cc grpc.ClientConnInterface
}

func NewMoveClient(cc grpc.ClientConnInterface) MoveClient {
	return &moveClient{cc}
}

func (c *moveClient) SetMove(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, Move_SetMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoveServer is the server API for Move service.
// All implementations should embed UnimplementedMoveServer
// for forward compatibility.
type MoveServer interface {
	SetMove(context.Context, *Input) (*Player, error)
}

// UnimplementedMoveServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoveServer struct{}

func (UnimplementedMoveServer) SetMove(context.Context, *Input) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMove not implemented")
}
func (UnimplementedMoveServer) testEmbeddedByValue() {}

// UnsafeMoveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoveServer will
// result in compilation errors.
type UnsafeMoveServer interface {
	mustEmbedUnimplementedMoveServer()
}

func RegisterMoveServer(s grpc.ServiceRegistrar, srv MoveServer) {
	// If the following call pancis, it indicates UnimplementedMoveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Move_ServiceDesc, srv)
}

func _Move_SetMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoveServer).SetMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Move_SetMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoveServer).SetMove(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// Move_ServiceDesc is the grpc.ServiceDesc for Move service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Move_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Move",
	HandlerType: (*MoveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMove",
			Handler:    _Move_SetMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Input/Move.proto",
}
